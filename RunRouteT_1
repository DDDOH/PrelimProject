# -*- coding: utf-8 -*
# To add a new cell, type '# %%'
# To add a new markdown cell, type '# %% [markdown]'
# %%
# [START import]
from __future__ import print_function
from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp
import matplotlib.pyplot as plt
import numpy as np
# [END import]
import time
import pandas as pd
import progressbar
import cvxpy as cp
import pickle as pkl
import sys

T_1 = int(sys.argv[0])




# %%
# [START solution_printer]
def print_solution(data, manager, routing, solution):
    """Prints solution on console."""
    total_distance = 0
    total_load = 0
    for vehicle_id in range(data['num_vehicles']):
        index = routing.Start(vehicle_id)
        plan_output = 'Route for vehicle {}:\n'.format(vehicle_id)
        route_distance = 0
        route_load = 0
        while not routing.IsEnd(index):
            node_index = manager.IndexToNode(index)
            route_load += data['demands'][node_index]
            plan_output += ' {0} Load({1}) -> '.format(node_index, route_load)
            previous_index = index
            index = solution.Value(routing.NextVar(index))
            route_distance += routing.GetArcCostForVehicle(
                previous_index, index, vehicle_id)
        plan_output += ' {0} Load({1})\n'.format(manager.IndexToNode(index),
                                                 route_load)
        plan_output += 'Distance of the route: {}m\n'.format(route_distance)
        plan_output += 'Load of the route: {}\n'.format(route_load)
        print(plan_output)
        total_distance += route_distance
        total_load += route_load
    print('Total distance of all routes: {}m'.format(total_distance))
    print('Total load of all routes: {}'.format(total_load))
    # [END solution_printer]

# %%
ascii_grid = np.loadtxt("/global/home/users/zyzheng/PrelimProject/Data/gpw-v4-population-density-adjusted-to-2015-unwpp-country-totals-rev11_2020_30_min_asc/gpw_v4_population_density_adjusted_to_2015_unwpp_country_totals_rev11_2020_30_min.asc", skiprows=6)
order_density = ascii_grid
order_density[order_density == -9999] = 0
order_density[order_density > 200] = 200
order_density = order_density[50:150, 80:250]
plt.matshow(order_density)


# %%
x_len = np.shape(order_density)[0]
y_len = np.shape(order_density)[1]


# %%
N_depot = 3

# depot_loc_ls = np.array([[40,60, 90],[40,100,80]])
depot_loc_ls = np.array([[20,90, 40],[20,80,140]])


# %%
def create_data_model(order_loc_ls, depot_loc_ls, order_demands, capacity=150):
    
    node_loc_ls = np.concatenate((depot_loc_ls, order_loc_ls),axis=1)
    N_order = np.shape(order_loc_ls)[1]
    N_depot = np.shape(depot_loc_ls)[1]

    distance_matrix = np.zeros((N_order+N_depot, N_order+N_depot))

    for i in range(N_order+N_depot):
        for j in range(i+1, N_order+N_depot):
    #         print(i,j)
            distance_matrix[i,j] = np.linalg.norm([node_loc_ls[0,i]-node_loc_ls[0,j],node_loc_ls[1,i]-node_loc_ls[1,j]])
            distance_matrix[j,i] = distance_matrix[i,j]


    node_demands = np.concatenate((np.zeros(N_depot),order_demands))
    """Stores the data for the problem."""
    data = {}
    data['node_loc_ls'] = node_loc_ls
    data['distance_matrix'] = distance_matrix
    # [START demands_capacities]
    data['demands'] = node_demands
    
    N_vehicle_each_depot = 5

    data['num_vehicles'] = N_depot * N_vehicle_each_depot
    data['vehicle_capacities'] = np.ones(data['num_vehicles'])*capacity
    # [END demands_capacities]
    
#     data['depot'] = 0
    data['starts'] = [0,1,2]*N_vehicle_each_depot
    data['ends'] = [0,1,2]*N_vehicle_each_depot
    return data
    # [END data_model]
# plt.matshow(create_data_model(order_loc_ls, depot_loc_ls, order_demands)['distance_matrix'])


# %%
def vrp_solve(order_loc_ls, depot_loc_ls, order_demands, capacity):
    """Entry point of the program."""
    time_start = time.time()
    # Instantiate the data problem.
    data = create_data_model(order_loc_ls, depot_loc_ls, order_demands, capacity)

    # Create the routing index manager.
    manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']),
                                        data['num_vehicles'], data['starts'],
                                        data['ends'])

    # Create Routing Model.
    routing = pywrapcp.RoutingModel(manager)


    # Create and register a transit callback.
    # [START transit_callback]
    def distance_callback(from_index, to_index):
        """Returns the distance between the two nodes."""
        # Convert from routing variable Index to distance matrix NodeIndex.
        from_node = manager.IndexToNode(from_index)
        to_node = manager.IndexToNode(to_index)
        return data['distance_matrix'][from_node][to_node]

    transit_callback_index = routing.RegisterTransitCallback(distance_callback)
    # [END transit_callback]

    # Define cost of each arc.
    # [START arc_cost]
    routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

    # [END arc_cost]

    # Add Capacity constraint.
    # [START capacity_constraint]
    def demand_callback(from_index):
        """Returns the demand of the node."""
        # Convert from routing variable Index to demands NodeIndex.
        from_node = manager.IndexToNode(from_index)
        return data['demands'][from_node]

    demand_callback_index = routing.RegisterUnaryTransitCallback(demand_callback)

    routing.AddDimensionWithVehicleCapacity(
        demand_callback_index,
        0,  # null capacity slack
        data['vehicle_capacities'],  # vehicle maximum capacities
        True,  # start cumul to zero
        'Capacity')

    # [END capacity_constraint]

    # Setting first solution heuristic.
    # [START parameters]
    search_parameters = pywrapcp.DefaultRoutingSearchParameters()
    # search_parameters.time_limit.seconds = 30
    search_parameters.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.AUTOMATIC)


    # search_parameters.local_search_metaheuristic = (
    #     routing_enums_pb2.LocalSearchMetaheuristic.GUIDED_LOCAL_SEARCH)
    # search_parameters.log_search = True
    # [END parameters]

    # Solve the problem.
    # [START solve]
    solution = routing.SolveWithParameters(search_parameters)
    # [END solve]

    # Print solution on console.
    # [START print_solution]
    # if solution:
    #     print_solution(data, manager, routing, solution)
    # [END print_solution]

    time_end = time.time()

    return data, routing, manager, solution


# %%
v = 4
N_F = 15
S_F  = 80

S_P = 15
c_f = 1

def C(N_F, S_F, D, v, S_P, c_f):
    return {'total':N_F * S_F + max(D/v- 8*N_F,0)*S_P + D*c_f,'fixed':N_F * S_F,'part':max(D/v- 8*N_F,0)*S_P,'fuel':D*c_f}
D_ls = np.arange(0,500,1)
cost_total_ls = [C(N_F, S_F, D, v, S_P, c_f)['total'] for D in D_ls]
cost_fixed_ls = [C(N_F, S_F, D, v, S_P, c_f)['fixed'] for D in D_ls]
cost_part_ls = [C(N_F, S_F, D, v, S_P, c_f)['part'] for D in D_ls]
cost_fuel_ls = [C(N_F, S_F, D, v, S_P, c_f)['fuel'] for D in D_ls]
plt.plot(D_ls, cost_total_ls)
plt.plot(D_ls, cost_fixed_ls)
plt.plot(D_ls, cost_part_ls)
plt.plot(D_ls, cost_fuel_ls)


# %%
# Value	Description
# 0	ROUTING_NOT_SOLVED: Problem not solved yet.
# 1	ROUTING_SUCCESS: Problem solved successfully.
# 2	ROUTING_FAIL: No solution found to the problem.
# 3	ROUTING_FAIL_TIMEOUT: Time limit reached before finding a solution.
# 4	ROUTING_INVALID: Model, model parameters, or flags are not valid.



# %% [markdown]
# # 订单多了，接T_1天，拒绝T_2天，用T_1+T_2天配送


# %%
# bin packing problem


T_1T_2combi_ls = [[1,0],[1,1],[1,2],[1,3],
                  [2,0],[2,1],[2,2],[2,3],
                  [3,0],[3,1],[3,2],[3,3],
                  [4,0],[4,1],[4,2],[4,3]]


T_1_ls = []
T_2_ls = []
for i in range(len(T_1T_2combi_ls)):
    T_1_ls.append(T_1T_2combi_ls[i][0])
    T_2_ls.append(T_1T_2combi_ls[i][1])

T_1_ls = list(set(T_1_ls))
T_2_ls = list(set(T_2_ls))


# %%
# 先把T_1那段时间对应的route都求出来，放server上跑


# %%


# 200个 3s
# 300个 7s
# 400个 13s

print('T_1 set to '+str(T_1))
print('N_exper set to '+str(N_exper))

N_exper = 100
route_result_ls = []
with progressbar.ProgressBar(max_value=N_exper) as bar:
    for i in range(N_exper):
        bar.update(i)

        N_order_each_day = np.random.normal(loc=100,scale=10*(2)**(1/2),size=T_1).astype(int)
        N_order_step1 = np.sum(N_order_each_day)    
       
        order_loc_ls = np.zeros((2,N_order_step1))
        max_density = np.max(order_density)
        max_sample = 30000
        order_sampled = 0
        for i in range(max_sample):
            random_loc_x = np.random.rand()*x_len
            random_loc_y = np.random.rand()*y_len
            if order_density[int(random_loc_x), int(random_loc_y)]/max_density > np.random.rand():
                order_loc_ls[:,order_sampled] = [random_loc_x, random_loc_y]
                order_sampled += 1
                if order_sampled >= N_order_step1:
                    break
        assert order_sampled == N_order_step1

        order_demands = np.random.randint(5,10,size=N_order_step1)
        data, routing, manager, solution = vrp_solve(order_loc_ls, depot_loc_ls, order_demands, capacity=200)
        if routing.status() != 1:
            print('failed')
            continue

        total_distance = 0
        
        for vehicle_id in range(data['num_vehicles']):
            index = routing.Start(vehicle_id)
            route_distance = 0
            node_ls = []
            while not routing.IsEnd(index):
                node_index = manager.IndexToNode(index)
                node_ls.append(node_index)
                previous_index = index
                index = solution.Value(routing.NextVar(index))
                route_distance += routing.GetArcCostForVehicle(
                        previous_index, index, vehicle_id)
            node_ls.append(manager.IndexToNode(index))
            
            
            total_distance += route_distance
            
            for i in range(N_depot):
                if i in node_ls:
                    depot_used = i

        # Step 2 ############################
        # vehicle_route: 每个vehicle走的route
        vehicle_route = {}

        for vehicle_id in range(data['num_vehicles']):
            this_vehicle_distance = 0
            this_vehicle_node_ls = []
            index = routing.Start(vehicle_id)
            while not routing.IsEnd(index):
                node_index = manager.IndexToNode(index)
                this_vehicle_node_ls.append(node_index)
                previous_index = index
                index = solution.Value(routing.NextVar(index))
                this_vehicle_distance += routing.GetArcCostForVehicle(
                        previous_index, index, vehicle_id)
            this_vehicle_node_ls.append(manager.IndexToNode(index))
            if this_vehicle_distance != 0:
                vehicle_route[vehicle_id] = {'route':np.array(this_vehicle_node_ls), 'distance':this_vehicle_distance}

        n_route = len(vehicle_route)
        L_i = [vehicle_route[x]['distance'] for x in vehicle_route]

        route_result_ls.append(vehicle_route)

# cost_result_ls = []
# dist_result_ls = []

# route_combo_result_ls = []
with open('result/route_result_ls N_exper:{} T_1:{}'.format(N_exper, T_1), 'wb') as file:
    pkl.dump(route_result_ls, file)

print('result pickle file saved')